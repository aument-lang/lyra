#pragma once
#include "../platform.h"
enum lyra_insn_type {
LYRA_OP_MOV_VAR,
LYRA_OP_MOV_I32,
LYRA_OP_MOV_BOOL,
LYRA_OP_MOV_F64,
LYRA_OP_ENSURE_I32,
LYRA_OP_ENSURE_I32_NUM,
LYRA_OP_ENSURE_F64,
LYRA_OP_ENSURE_F64_PRIM,
LYRA_OP_ENSURE_F64_NUM,
LYRA_OP_ENSURE_NUM,
LYRA_OP_ENSURE_NUM_UNTYPED,
LYRA_OP_ENSURE_NUM_I32,
LYRA_OP_ENSURE_NUM_F64,
LYRA_OP_ENSURE_VALUE_UNTYPED,
LYRA_OP_ENSURE_VALUE_I32,
LYRA_OP_ENSURE_VALUE_F64,
LYRA_OP_ENSURE_VALUE_BOOL,
LYRA_OP_ENSURE_VALUE_NUM,
LYRA_OP_NOT_VAR,
LYRA_OP_NOT_PRIM,
LYRA_OP_NEG_VAR,
LYRA_OP_NEG_NUM,
LYRA_OP_BNOT_I32,
LYRA_OP_MUL_VAR,
LYRA_OP_MUL_PRIM,
LYRA_OP_MUL_NUM_I32,
LYRA_OP_MUL_NUM_F64,
LYRA_OP_DIV_VAR,
LYRA_OP_DIV_PRIM,
LYRA_OP_ADD_VAR,
LYRA_OP_ADD_PRIM,
LYRA_OP_ADD_NUM_I32,
LYRA_OP_ADD_NUM_F64,
LYRA_OP_SUB_VAR,
LYRA_OP_SUB_PRIM,
LYRA_OP_SUB_NUM_I32,
LYRA_OP_SUB_NUM_F64,
LYRA_OP_BOR_I32,
LYRA_OP_BXOR_I32,
LYRA_OP_BAND_I32,
LYRA_OP_BSHL_I32,
LYRA_OP_BSHR_I32,
LYRA_OP_MOD_I32,
LYRA_OP_EQ_VAR,
LYRA_OP_EQ_PRIM,
LYRA_OP_EQ_NUM,
LYRA_OP_NEQ_VAR,
LYRA_OP_NEQ_PRIM,
LYRA_OP_NEQ_NUM,
LYRA_OP_LT_VAR,
LYRA_OP_LT_PRIM,
LYRA_OP_LT_NUM,
LYRA_OP_GT_VAR,
LYRA_OP_GT_PRIM,
LYRA_OP_GT_NUM,
LYRA_OP_LEQ_VAR,
LYRA_OP_LEQ_PRIM,
LYRA_OP_LEQ_NUM,
LYRA_OP_GEQ_VAR,
LYRA_OP_GEQ_PRIM,
LYRA_OP_GEQ_NUM,
LYRA_OP_LOAD_ARG,
LYRA_OP_CALL,
LYRA_OP_CALL_FLAT,
};
static LYRA_ALWAYS_INLINE LYRA_UNUSED int lyra_insn_type_has_left_var(enum lyra_insn_type type) {
if(type == LYRA_OP_MOV_VAR) return 1;
if(type == LYRA_OP_ENSURE_I32) return 1;
if(type == LYRA_OP_ENSURE_I32_NUM) return 1;
if(type == LYRA_OP_ENSURE_F64) return 1;
if(type == LYRA_OP_ENSURE_F64_PRIM) return 1;
if(type == LYRA_OP_ENSURE_F64_NUM) return 1;
if(type == LYRA_OP_ENSURE_NUM) return 1;
if(type == LYRA_OP_ENSURE_NUM_UNTYPED) return 1;
if(type == LYRA_OP_ENSURE_NUM_I32) return 1;
if(type == LYRA_OP_ENSURE_NUM_F64) return 1;
if(type == LYRA_OP_ENSURE_VALUE_UNTYPED) return 1;
if(type == LYRA_OP_ENSURE_VALUE_I32) return 1;
if(type == LYRA_OP_ENSURE_VALUE_F64) return 1;
if(type == LYRA_OP_ENSURE_VALUE_BOOL) return 1;
if(type == LYRA_OP_ENSURE_VALUE_NUM) return 1;
if(type == LYRA_OP_NOT_VAR) return 1;
if(type == LYRA_OP_NOT_PRIM) return 1;
if(type == LYRA_OP_NEG_VAR) return 1;
if(type == LYRA_OP_NEG_NUM) return 1;
if(type == LYRA_OP_BNOT_I32) return 1;
if(type == LYRA_OP_MUL_VAR) return 1;
if(type == LYRA_OP_MUL_PRIM) return 1;
if(type == LYRA_OP_MUL_NUM_I32) return 1;
if(type == LYRA_OP_MUL_NUM_F64) return 1;
if(type == LYRA_OP_DIV_VAR) return 1;
if(type == LYRA_OP_DIV_PRIM) return 1;
if(type == LYRA_OP_ADD_VAR) return 1;
if(type == LYRA_OP_ADD_PRIM) return 1;
if(type == LYRA_OP_ADD_NUM_I32) return 1;
if(type == LYRA_OP_ADD_NUM_F64) return 1;
if(type == LYRA_OP_SUB_VAR) return 1;
if(type == LYRA_OP_SUB_PRIM) return 1;
if(type == LYRA_OP_SUB_NUM_I32) return 1;
if(type == LYRA_OP_SUB_NUM_F64) return 1;
if(type == LYRA_OP_BOR_I32) return 1;
if(type == LYRA_OP_BXOR_I32) return 1;
if(type == LYRA_OP_BAND_I32) return 1;
if(type == LYRA_OP_BSHL_I32) return 1;
if(type == LYRA_OP_BSHR_I32) return 1;
if(type == LYRA_OP_MOD_I32) return 1;
if(type == LYRA_OP_EQ_VAR) return 1;
if(type == LYRA_OP_EQ_PRIM) return 1;
if(type == LYRA_OP_EQ_NUM) return 1;
if(type == LYRA_OP_NEQ_VAR) return 1;
if(type == LYRA_OP_NEQ_PRIM) return 1;
if(type == LYRA_OP_NEQ_NUM) return 1;
if(type == LYRA_OP_LT_VAR) return 1;
if(type == LYRA_OP_LT_PRIM) return 1;
if(type == LYRA_OP_LT_NUM) return 1;
if(type == LYRA_OP_GT_VAR) return 1;
if(type == LYRA_OP_GT_PRIM) return 1;
if(type == LYRA_OP_GT_NUM) return 1;
if(type == LYRA_OP_LEQ_VAR) return 1;
if(type == LYRA_OP_LEQ_PRIM) return 1;
if(type == LYRA_OP_LEQ_NUM) return 1;
if(type == LYRA_OP_GEQ_VAR) return 1;
if(type == LYRA_OP_GEQ_PRIM) return 1;
if(type == LYRA_OP_GEQ_NUM) return 1;
return 0;}
static LYRA_ALWAYS_INLINE LYRA_UNUSED int lyra_insn_type_has_right_var(LYRA_UNUSED enum lyra_insn_type type) {
if(type == LYRA_OP_MUL_VAR) return 1;
if(type == LYRA_OP_MUL_PRIM) return 1;
if(type == LYRA_OP_MUL_NUM_I32) return 1;
if(type == LYRA_OP_MUL_NUM_F64) return 1;
if(type == LYRA_OP_DIV_VAR) return 1;
if(type == LYRA_OP_DIV_PRIM) return 1;
if(type == LYRA_OP_ADD_VAR) return 1;
if(type == LYRA_OP_ADD_PRIM) return 1;
if(type == LYRA_OP_ADD_NUM_I32) return 1;
if(type == LYRA_OP_ADD_NUM_F64) return 1;
if(type == LYRA_OP_SUB_VAR) return 1;
if(type == LYRA_OP_SUB_PRIM) return 1;
if(type == LYRA_OP_SUB_NUM_I32) return 1;
if(type == LYRA_OP_SUB_NUM_F64) return 1;
if(type == LYRA_OP_BOR_I32) return 1;
if(type == LYRA_OP_BXOR_I32) return 1;
if(type == LYRA_OP_BAND_I32) return 1;
if(type == LYRA_OP_BSHL_I32) return 1;
if(type == LYRA_OP_BSHR_I32) return 1;
if(type == LYRA_OP_MOD_I32) return 1;
if(type == LYRA_OP_EQ_VAR) return 1;
if(type == LYRA_OP_EQ_PRIM) return 1;
if(type == LYRA_OP_EQ_NUM) return 1;
if(type == LYRA_OP_NEQ_VAR) return 1;
if(type == LYRA_OP_NEQ_PRIM) return 1;
if(type == LYRA_OP_NEQ_NUM) return 1;
if(type == LYRA_OP_LT_VAR) return 1;
if(type == LYRA_OP_LT_PRIM) return 1;
if(type == LYRA_OP_LT_NUM) return 1;
if(type == LYRA_OP_GT_VAR) return 1;
if(type == LYRA_OP_GT_PRIM) return 1;
if(type == LYRA_OP_GT_NUM) return 1;
if(type == LYRA_OP_LEQ_VAR) return 1;
if(type == LYRA_OP_LEQ_PRIM) return 1;
if(type == LYRA_OP_LEQ_NUM) return 1;
if(type == LYRA_OP_GEQ_VAR) return 1;
if(type == LYRA_OP_GEQ_PRIM) return 1;
if(type == LYRA_OP_GEQ_NUM) return 1;
return 0;}
static LYRA_ALWAYS_INLINE LYRA_UNUSED int lyra_insn_type_has_dest(LYRA_UNUSED enum lyra_insn_type type) {
if(type == LYRA_OP_MOV_VAR) return 1;
if(type == LYRA_OP_MOV_I32) return 1;
if(type == LYRA_OP_MOV_BOOL) return 1;
if(type == LYRA_OP_MOV_F64) return 1;
if(type == LYRA_OP_ENSURE_I32) return 1;
if(type == LYRA_OP_ENSURE_I32_NUM) return 1;
if(type == LYRA_OP_ENSURE_F64) return 1;
if(type == LYRA_OP_ENSURE_F64_PRIM) return 1;
if(type == LYRA_OP_ENSURE_F64_NUM) return 1;
if(type == LYRA_OP_ENSURE_NUM) return 1;
if(type == LYRA_OP_ENSURE_NUM_UNTYPED) return 1;
if(type == LYRA_OP_ENSURE_NUM_I32) return 1;
if(type == LYRA_OP_ENSURE_NUM_F64) return 1;
if(type == LYRA_OP_ENSURE_VALUE_UNTYPED) return 1;
if(type == LYRA_OP_ENSURE_VALUE_I32) return 1;
if(type == LYRA_OP_ENSURE_VALUE_F64) return 1;
if(type == LYRA_OP_ENSURE_VALUE_BOOL) return 1;
if(type == LYRA_OP_ENSURE_VALUE_NUM) return 1;
if(type == LYRA_OP_NOT_VAR) return 1;
if(type == LYRA_OP_NOT_PRIM) return 1;
if(type == LYRA_OP_NEG_VAR) return 1;
if(type == LYRA_OP_NEG_NUM) return 1;
if(type == LYRA_OP_BNOT_I32) return 1;
if(type == LYRA_OP_MUL_VAR) return 1;
if(type == LYRA_OP_MUL_PRIM) return 1;
if(type == LYRA_OP_MUL_NUM_I32) return 1;
if(type == LYRA_OP_MUL_NUM_F64) return 1;
if(type == LYRA_OP_DIV_VAR) return 1;
if(type == LYRA_OP_DIV_PRIM) return 1;
if(type == LYRA_OP_ADD_VAR) return 1;
if(type == LYRA_OP_ADD_PRIM) return 1;
if(type == LYRA_OP_ADD_NUM_I32) return 1;
if(type == LYRA_OP_ADD_NUM_F64) return 1;
if(type == LYRA_OP_SUB_VAR) return 1;
if(type == LYRA_OP_SUB_PRIM) return 1;
if(type == LYRA_OP_SUB_NUM_I32) return 1;
if(type == LYRA_OP_SUB_NUM_F64) return 1;
if(type == LYRA_OP_BOR_I32) return 1;
if(type == LYRA_OP_BXOR_I32) return 1;
if(type == LYRA_OP_BAND_I32) return 1;
if(type == LYRA_OP_BSHL_I32) return 1;
if(type == LYRA_OP_BSHR_I32) return 1;
if(type == LYRA_OP_MOD_I32) return 1;
if(type == LYRA_OP_EQ_VAR) return 1;
if(type == LYRA_OP_EQ_PRIM) return 1;
if(type == LYRA_OP_EQ_NUM) return 1;
if(type == LYRA_OP_NEQ_VAR) return 1;
if(type == LYRA_OP_NEQ_PRIM) return 1;
if(type == LYRA_OP_NEQ_NUM) return 1;
if(type == LYRA_OP_LT_VAR) return 1;
if(type == LYRA_OP_LT_PRIM) return 1;
if(type == LYRA_OP_LT_NUM) return 1;
if(type == LYRA_OP_GT_VAR) return 1;
if(type == LYRA_OP_GT_PRIM) return 1;
if(type == LYRA_OP_GT_NUM) return 1;
if(type == LYRA_OP_LEQ_VAR) return 1;
if(type == LYRA_OP_LEQ_PRIM) return 1;
if(type == LYRA_OP_LEQ_NUM) return 1;
if(type == LYRA_OP_GEQ_VAR) return 1;
if(type == LYRA_OP_GEQ_PRIM) return 1;
if(type == LYRA_OP_GEQ_NUM) return 1;
if(type == LYRA_OP_LOAD_ARG) return 1;
if(type == LYRA_OP_CALL) return 1;
if(type == LYRA_OP_CALL_FLAT) return 1;
return 0;}
static LYRA_ALWAYS_INLINE LYRA_UNUSED int lyra_insn_type_has_side_effect(LYRA_UNUSED enum lyra_insn_type type) {
if(type == LYRA_OP_CALL) return 1;
if(type == LYRA_OP_CALL_FLAT) return 1;
return 0;}
